{"version":3,"sources":["tasks/components/TaskInput.jsx","tasks/components/Task.jsx","tasks/tasks.selectors.js","tasks/tasksListGateways.js","tasks/tasks.actions.js","tasks/components/TasksList.jsx","tasks/components/TodoList.jsx","tasks/tasks.reducer.js","store.js","App.jsx","index.jsx"],"names":["TaskInput","state","value","onChange","e","setState","target","onCreateTaskHandler","props","onCreateTask","className","type","this","onClick","Component","Task","text","done","id","onDeleteTask","onChangeStatus","classNames","defaultChecked","tasksListSelector","tasksList","tasks","sortedTasksSelector","createSelector","slice","sort","a","b","baseurl","getTasksList","dispatch","fetch","then","response","ok","json","payload","setTaskList","TasksList","getTasks","createTask","map","task","key","deleteTask","updateTask","mapDispatch","tasksActions","taskData","method","headers","body","JSON","stringify","Error","taskId","getState","find","connect","TodoList","defaultState","tasksReducer","action","reducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0d5aeda2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TaskInput extends Component {\r\n    state = {\r\n        value: '',\r\n    };\r\n\r\n    onChange = e => {\r\n        this.setState({\r\n            value: e.target.value,\r\n        });\r\n    }\r\n\r\n    onCreateTaskHandler = () => {\r\n        this.props.onCreateTask(this.state.value);\r\n        this.setState({ value: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"create-task\">\r\n                <input \r\n                    className=\"create-task__input\" \r\n                    type=\"text\" \r\n                    value={this.state.value}\r\n                    onChange={this.onChange}\r\n                />\r\n                <button \r\n                    className=\"btn create-task-btn\"\r\n                    onClick={this.onCreateTaskHandler}\r\n                >Create</button>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default TaskInput;\r\n\r\nTaskInput.propTypes = {\r\n    onCreateTask: PropTypes.func,\r\n}","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Task = ({ text, done, id, onDeleteTask, onChangeStatus }) => {\r\n\r\n    return (\r\n        <li className={classNames('list-item', {'list-item_done' : done})}>\r\n            <input \r\n                className=\"list-item__checkbox\"\r\n                defaultChecked={done}\r\n                type=\"checkbox\"\r\n                onChange={() => onChangeStatus(id)}\r\n            />\r\n            <span className=\"list-item__text\">{text}</span>\r\n            <button\r\n                className=\"list-item__delete-btn\"\r\n                onClick={() => onDeleteTask(id)}\r\n            ></button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Task;\r\n\r\nTask.propTypes = {\r\n    text: PropTypes.string,\r\n    done: PropTypes.bool,\r\n    id: PropTypes.string,\r\n    onDeleteTask: PropTypes.func,\r\n    onChangeStatus: PropTypes.func\r\n}","import { createSelector } from 'reselect';\r\n\r\nexport const tasksListSelector = state => state.tasksList.tasks;\r\n\r\nexport const sortedTasksSelector = createSelector(\r\n    [tasksListSelector],\r\n    (tasksList) => {\r\n        return tasksList.slice().sort((a, b) => a.done - b.done);\r\n    }\r\n);","const baseurl =\r\n    'https://5e6213046f5c7900149bc94d.mockapi.io/tasks';\r\n\r\n\r\nexport const fetchTasksList = () => {\r\n    return fetch(baseurl)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n        })\r\n};\r\n\r\nexport const createTask = taskData => {\r\n    return fetch(baseurl, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify(taskData),\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Failed to Fetch Data!');\r\n            }\r\n        })\r\n};\r\n\r\nexport const updateTask = (taskId, taskData) => {\r\n    return fetch(`${baseurl}/${taskId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify(taskData),\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Failed to Update Data!');\r\n            }\r\n        })\r\n};\r\n\r\nexport const deleteTask = taskId => {\r\n    return fetch(`${baseurl}/${taskId}`, {\r\n        method: 'DELETE'\r\n    })\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Failed to Delete Data!');\r\n            }\r\n        })\r\n};\r\n\r\n","import * as tasksGateway from './tasksListGateways';\r\nimport {tasksListSelector} from './tasks.selectors';\r\n\r\nexport const SET_TASKS_LIST = 'SET_TASKS_LIST';\r\n\r\nexport const setTaskList = tasksList => {\r\n    return {\r\n        type: SET_TASKS_LIST,\r\n        payload: {\r\n            tasksList,\r\n        }\r\n    }\r\n};\r\n\r\nexport const getTasksList = () => {\r\n    return (dispatch) => {\r\n        tasksGateway.fetchTasksList()\r\n            .then(tasksList => {\r\n                dispatch(setTaskList(tasksList))\r\n            })\r\n    };\r\n};\r\n\r\nexport const createTask = text => {\r\n    return (dispatch) => {\r\n        const newTask = {\r\n            text,\r\n            done: false,\r\n        }\r\n        tasksGateway.createTask(newTask)\r\n            .then(() => dispatch(getTasksList()));\r\n    };\r\n};\r\n\r\nexport const updateTask = id => {\r\n    return (dispatch, getState) => {\r\n        const state = getState();\r\n        const tasksList = tasksListSelector(state);\r\n        const { done, text } = tasksList.find(task => task.id === id);\r\n        const updatedTask = {\r\n            text,\r\n            done: !done,\r\n        }\r\n\r\n        tasksGateway.updateTask(id, updatedTask)\r\n            .then(() => dispatch(getTasksList()));\r\n    };\r\n};\r\n\r\nexport const deleteTask = id => {\r\n    return (dispatch) => {\r\n        tasksGateway.deleteTask(id)\r\n            .then(() => dispatch(getTasksList()));\r\n    };\r\n};","import React, { Component } from 'react';\r\nimport TaskInput from './TaskInput';\r\nimport Task from './Task';\r\nimport { connect } from 'react-redux';\r\nimport { sortedTasksSelector } from '../tasks.selectors';\r\nimport * as tasksActions from '../tasks.actions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TasksList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getTasks();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-list\">\r\n                <TaskInput\r\n                    onCreateTask={this.props.createTask} />\r\n                <ul className=\"list\">\r\n                    {this.props.tasks.map(task =>\r\n                        <Task\r\n                            {...task}\r\n                            key={task.id}\r\n                            onDeleteTask={this.props.deleteTask}\r\n                            onChangeStatus={this.props.updateTask} />\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nTasksList.propTypes = {\r\n    tasks: PropTypes.arrayOf(PropTypes.shape()),\r\n    getTasks: PropTypes.func,\r\n    createTask: PropTypes.func,\r\n    deleteTask: PropTypes.func,\r\n    updateTask: PropTypes.func,\r\n};\r\n\r\nconst mapState = state => {\r\n    return {\r\n        tasks: sortedTasksSelector(state),\r\n    };\r\n};\r\n\r\nconst mapDispatch = {\r\n    getTasks: tasksActions.getTasksList,\r\n    createTask: tasksActions.createTask,\r\n    deleteTask: tasksActions.deleteTask,\r\n    updateTask: tasksActions.updateTask,\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(TasksList);","import React from 'react';\r\nimport TasksList from './TasksList';\r\n\r\nconst TodoList = () => {\r\n    return (\r\n        <>\r\n            <h1 className=\"title\">Todo List</h1>\r\n            <TasksList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import { SET_TASKS_LIST } from './tasks.actions';\r\n\r\nconst defaultState = {\r\n    tasks: [],\r\n};\r\n\r\nconst tasksReducer = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case SET_TASKS_LIST:\r\n            return {\r\n                ...state,\r\n                tasks: action.payload.tasksList,\r\n            }\r\n        default: return state;\r\n    };\r\n};\r\n\r\nexport default tasksReducer;","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport tasksReducer from './tasks/tasks.reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst reducer = combineReducers({\r\n    tasksList: tasksReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    composeEnhancers(\r\n        applyMiddleware(thunk),\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport TodoList from './tasks/components/TodoList';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store} >\r\n            <TodoList />\r\n        </Provider>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}